
VS1003_F410RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d10  08003d10  00005940  2**0
                  CONTENTS
  4 .ARM          00000008  08003d10  08003d10  00004d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d18  08003d18  00005940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d18  08003d18  00004d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d1c  08003d1c  00004d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000940  20000000  08003d20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000940  08004660  00005940  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  08004660  00005b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a224  00000000  00000000  00005970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b21  00000000  00000000  0000fb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  000116b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f3  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013858  00000000  00000000  000126c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4c0  00000000  00000000  00025f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078f05  00000000  00000000  000313db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa2e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000aa324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000acc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000940 	.word	0x20000940
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c78 	.word	0x08003c78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000944 	.word	0x20000944
 800020c:	08003c78 	.word	0x08003c78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b6:	f000 fcfd 	bl	8000fb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ba:	f000 f833 	bl	8000624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005be:	f000 f8fd 	bl	80007bc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005c2:	f000 f8d1 	bl	8000768 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80005c6:	f000 f899 	bl	80006fc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	vs1003_begin();
 80005ca:	f000 fbfb 	bl	8000dc4 <vs1003_begin>
	vs1003_setVolume(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fc58 	bl	8000e84 <vs1003_setVolume>

	//trying inverting audio
	uint16_t mask = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	80fb      	strh	r3, [r7, #6]
	mask |= 0b1 << 0;
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	80fb      	strh	r3, [r7, #6]
	vs1003_write_register(0x00, vs1003_read_register(0x00) | mask);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fb4d 	bl	8000c80 <vs1003_read_register>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 fb88 	bl	8000d08 <vs1003_write_register>

	vs1003_print_all_register_details();
 80005f8:	f000 fc92 	bl	8000f20 <vs1003_print_all_register_details>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		vs1003_playChunk(pcm_data, sizeof(pcm_data));
 80005fc:	f640 01dd 	movw	r1, #2269	@ 0x8dd
 8000600:	4806      	ldr	r0, [pc, #24]	@ (800061c <main+0x6c>)
 8000602:	f000 fc58 	bl	8000eb6 <vs1003_playChunk>
		vs1003_print_all_register_details();
 8000606:	f000 fc8b 	bl	8000f20 <vs1003_print_all_register_details>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800060a:	2120      	movs	r1, #32
 800060c:	4804      	ldr	r0, [pc, #16]	@ (8000620 <main+0x70>)
 800060e:	f000 fff2 	bl	80015f6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	@ 0x64
 8000614:	f000 fd40 	bl	8001098 <HAL_Delay>
		vs1003_playChunk(pcm_data, sizeof(pcm_data));
 8000618:	bf00      	nop
 800061a:	e7ef      	b.n	80005fc <main+0x4c>
 800061c:	20000000 	.word	0x20000000
 8000620:	40020000 	.word	0x40020000

08000624 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fea0 	bl	8003378 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f9dc 	bl	8001a6c <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
		Error_Handler();
 80006ba:	f000 f921 	bl	8000900 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 ffa6 	bl	800162c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
		Error_Handler();
 80006e6:	f000 f90b 	bl	8000900 <Error_Handler>
	}
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2218      	movs	r2, #24
 8000732:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 15;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220f      	movs	r2, #15
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f001 fc11 	bl	8001f74 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
		Error_Handler();
 8000758:	f000 f8d2 	bl	8000900 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000095c 	.word	0x2000095c
 8000764:	40003800 	.word	0x40003800

08000768 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f002 f9be 	bl	8002b20 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80007aa:	f000 f8a9 	bl	8000900 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200009b4 	.word	0x200009b4
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b46      	ldr	r3, [pc, #280]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a45      	ldr	r2, [pc, #276]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b43      	ldr	r3, [pc, #268]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b3f      	ldr	r3, [pc, #252]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a3e      	ldr	r2, [pc, #248]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b3c      	ldr	r3, [pc, #240]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b38      	ldr	r3, [pc, #224]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a37      	ldr	r2, [pc, #220]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a30      	ldr	r2, [pc, #192]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCS_GPIO_Port, DCS_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2102      	movs	r1, #2
 8000846:	482b      	ldr	r0, [pc, #172]	@ (80008f4 <MX_GPIO_Init+0x138>)
 8000848:	f000 febc 	bl	80015c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2120      	movs	r1, #32
 8000850:	4829      	ldr	r0, [pc, #164]	@ (80008f8 <MX_GPIO_Init+0x13c>)
 8000852:	f000 feb7 	bl	80015c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | CS_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2105      	movs	r1, #5
 800085a:	4828      	ldr	r0, [pc, #160]	@ (80008fc <MX_GPIO_Init+0x140>)
 800085c:	f000 feb2 	bl	80015c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000864:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	481f      	ldr	r0, [pc, #124]	@ (80008f4 <MX_GPIO_Init+0x138>)
 8000878:	f000 fd18 	bl	80012ac <HAL_GPIO_Init>

	/*Configure GPIO pin : DCS_Pin */
	GPIO_InitStruct.Pin = DCS_Pin;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DCS_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4818      	ldr	r0, [pc, #96]	@ (80008f4 <MX_GPIO_Init+0x138>)
 8000894:	f000 fd0a 	bl	80012ac <HAL_GPIO_Init>

	/*Configure GPIO pin : DREQ_Pin */
	GPIO_InitStruct.Pin = DREQ_Pin;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DREQ_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4813      	ldr	r0, [pc, #76]	@ (80008f8 <MX_GPIO_Init+0x13c>)
 80008ac:	f000 fcfe 	bl	80012ac <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_GPIO_Init+0x13c>)
 80008c8:	f000 fcf0 	bl	80012ac <HAL_GPIO_Init>

	/*Configure GPIO pins : RST_Pin CS_Pin */
	GPIO_InitStruct.Pin = RST_Pin | CS_Pin;
 80008cc:	2305      	movs	r3, #5
 80008ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_GPIO_Init+0x140>)
 80008e4:	f000 fce2 	bl	80012ac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020400 	.word	0x40020400

08000900 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000920:	6453      	str	r3, [r2, #68]	@ 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094a:	2007      	movs	r0, #7
 800094c:	f000 fc7a 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <HAL_SPI_MspInit+0xc0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d14a      	bne.n	8000a14 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a26      	ldr	r2, [pc, #152]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a18      	ldr	r2, [pc, #96]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <HAL_SPI_MspInit+0xc8>)
 80009ee:	f000 fc5d 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a04:	2305      	movs	r3, #5
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <HAL_SPI_MspInit+0xcc>)
 8000a10:	f000 fc4c 	bl	80012ac <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40003800 	.word	0x40003800
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12b      	bne.n	8000aa6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa2:	f000 fc03 	bl	80012ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 faa1 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f002 fc1c 	bl	8003388 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20008000 	.word	0x20008000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200009fc 	.word	0x200009fc
 8000b84:	20000b50 	.word	0x20000b50

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <delayMicroseconds>:
/*
 * Currently delaying in milliseconds, Change it to hardware timer to microseconds later
 * @param time
 * @TODO
 * */
void delayMicroseconds(uint8_t time) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(time);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fa6d 	bl	8001098 <HAL_Delay>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <vs1003_await_data_request>:
/*
 * @brief Wait unti-ll DREQ pin is LOW
 * REFER SECTION 7.3 OF DATASHEET
 * if DREQ is high then we can send 32 byte of SDI and 1 SCI command, if it is LOW we can't send any data on either of the bus
 * */
void vs1003_await_data_request(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	while (!(HAL_GPIO_ReadPin(VS1003_DREQ_PORT, VS1003_DREQ_PIN)))
 8000bcc:	bf00      	nop
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <vs1003_await_data_request+0x1c>)
 8000bd2:	f000 fcdf 	bl	8001594 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f8      	beq.n	8000bce <vs1003_await_data_request+0x6>
		;
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40020000 	.word	0x40020000

08000be8 <vs1003_control_mode_on>:
/*
 * @brief enabling chip select pin for writing SCI [SERIAL CONTROL INTERFACE] Command
 *Turn DCS for SDA [SERIAL DATA INTERFACE] HIGH ~ it is disabled
 *Turn CS for SCI LOW ~ it is Enabled
 * */
void vs1003_control_mode_on(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VS1003_DCS_PORT, VS1003_DCS_PIN, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <vs1003_control_mode_on+0x1c>)
 8000bf2:	f000 fce7 	bl	80015c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VS1003_CS_PORT, VS1003_CS_PIN, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <vs1003_control_mode_on+0x20>)
 8000bfc:	f000 fce2 	bl	80015c4 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020400 	.word	0x40020400

08000c0c <vs1003_control_mode_off>:

/**
 * @brief Just put the Chip select pin HIGH
 *
 */
void vs1003_control_mode_off(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VS1003_CS_PORT, VS1003_CS_PIN, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2104      	movs	r1, #4
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <vs1003_control_mode_off+0x14>)
 8000c16:	f000 fcd5 	bl	80015c4 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40020400 	.word	0x40020400

08000c24 <vs1003_data_mode_on>:
/**
 * @brief turn data mode on by putting CH pin for SCI high ~ disabled
 * and DCS pin for SDI low ~ enabled
 *
 */
void vs1003_data_mode_on(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VS1003_CS_PORT, VS1003_CS_PIN, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <vs1003_data_mode_on+0x1c>)
 8000c2e:	f000 fcc9 	bl	80015c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VS1003_DCS_PORT, VS1003_DCS_PIN, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2102      	movs	r1, #2
 8000c36:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <vs1003_data_mode_on+0x20>)
 8000c38:	f000 fcc4 	bl	80015c4 <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40020800 	.word	0x40020800

08000c48 <vs1003_data_mode_off>:
/**
 * @brief just put the DCS pin high ~ SDI disabled
 *
 */
void vs1003_data_mode_off(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VS1003_DCS_PORT, VS1003_DCS_PIN, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <vs1003_data_mode_off+0x14>)
 8000c52:	f000 fcb7 	bl	80015c4 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40020800 	.word	0x40020800

08000c60 <find_min>:
/**
 * @brief find which one is smaller
 * @param size_t a , size_t b
 * @return smaller number
 */
size_t find_min(size_t a, size_t b) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	return a > b ? b : a;
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	bf28      	it	cs
 8000c72:	4613      	movcs	r3, r2
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <vs1003_read_register>:
/**
 * @brief read register of VS1003
 * @param uint8_t register address
 * @return uint16_t dataRead at the supplied address
 * */
uint16_t vs1003_read_register(uint8_t _reg) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	uint16_t result;
	uint8_t temp = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	737b      	strb	r3, [r7, #13]
	vs1003_control_mode_on();
 8000c8e:	f7ff ffab 	bl	8000be8 <vs1003_control_mode_on>
	delayMicroseconds(1); // tXCSS
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff8a 	bl	8000bac <delayMicroseconds>

//SPI 1
	HAL_SPI_Transmit(&hspi2, &VS_READ_COMMAND, 1, HAL_MAX_DELAY); //command for read
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4918      	ldr	r1, [pc, #96]	@ (8000d00 <vs1003_read_register+0x80>)
 8000ca0:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <vs1003_read_register+0x84>)
 8000ca2:	f001 f9f0 	bl	8002086 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &_reg, 1, HAL_MAX_DELAY); //register
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	2201      	movs	r2, #1
 8000cae:	4815      	ldr	r0, [pc, #84]	@ (8000d04 <vs1003_read_register+0x84>)
 8000cb0:	f001 f9e9 	bl	8002086 <HAL_SPI_Transmit>
	//READ DATA
	HAL_SPI_Receive(&hspi2, &temp, 1, HAL_MAX_DELAY);
 8000cb4:	f107 010d 	add.w	r1, r7, #13
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4811      	ldr	r0, [pc, #68]	@ (8000d04 <vs1003_read_register+0x84>)
 8000cc0:	f001 fb24 	bl	800230c <HAL_SPI_Receive>
	result = temp << 8;
 8000cc4:	7b7b      	ldrb	r3, [r7, #13]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	81fb      	strh	r3, [r7, #14]
	temp = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi2, &temp, 1, HAL_MAX_DELAY);
 8000cce:	f107 010d 	add.w	r1, r7, #13
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <vs1003_read_register+0x84>)
 8000cda:	f001 fb17 	bl	800230c <HAL_SPI_Receive>
	result |= temp;
 8000cde:	7b7b      	ldrb	r3, [r7, #13]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	81fb      	strh	r3, [r7, #14]
//	uint8_t tx_data[] = { VS_READ_COMMAND, _reg };
//	uint8_t rx_data[2] = { 0, 0 };
//	HAL_SPI_TransmitReceive(&hspi2, tx_data, rx_data, 2, HAL_MAX_DELAY);
//	result = (rx_data[0] << 8) | rx_data[1];

	delayMicroseconds(1); // tXCSH
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff5f 	bl	8000bac <delayMicroseconds>
	vs1003_await_data_request();
 8000cee:	f7ff ff6b 	bl	8000bc8 <vs1003_await_data_request>
	vs1003_control_mode_off();
 8000cf2:	f7ff ff8b 	bl	8000c0c <vs1003_control_mode_off>
	return result;
 8000cf6:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200008e5 	.word	0x200008e5
 8000d04:	2000095c 	.word	0x2000095c

08000d08 <vs1003_write_register>:
/**
 * @brief write register
 * @param uint8_t register address , uint16_t data to be written
 *
 * */
void vs1003_write_register(uint8_t _reg, uint16_t _value) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	460a      	mov	r2, r1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	80bb      	strh	r3, [r7, #4]
	vs1003_control_mode_on();
 8000d18:	f7ff ff66 	bl	8000be8 <vs1003_control_mode_on>
	delayMicroseconds(1); // tXCSS
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff ff45 	bl	8000bac <delayMicroseconds>

	uint8_t data[4] = { VS_WRITE_COMMAND, _reg, (_value >> 8), (_value & 0xFF) };
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <vs1003_write_register+0x54>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	733b      	strb	r3, [r7, #12]
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	737b      	strb	r3, [r7, #13]
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	73bb      	strb	r3, [r7, #14]
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, data, 4, HAL_MAX_DELAY);
 8000d3c:	f107 010c 	add.w	r1, r7, #12
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	2204      	movs	r2, #4
 8000d46:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <vs1003_write_register+0x58>)
 8000d48:	f001 f99d 	bl	8002086 <HAL_SPI_Transmit>

	vs1003_await_data_request();
 8000d4c:	f7ff ff3c 	bl	8000bc8 <vs1003_await_data_request>
	vs1003_control_mode_off();
 8000d50:	f7ff ff5c 	bl	8000c0c <vs1003_control_mode_off>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200008e4 	.word	0x200008e4
 8000d60:	2000095c 	.word	0x2000095c

08000d64 <vs1003_sdi_send_buffer>:

/**
 * @brief send SDI Buffer Data
 * @param uint8_t * data, size_t length of data
 * */
void vs1003_sdi_send_buffer(uint8_t *data, size_t len) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	vs1003_data_mode_on();
 8000d6e:	f7ff ff59 	bl	8000c24 <vs1003_data_mode_on>
	while (len) {
 8000d72:	e01c      	b.n	8000dae <vs1003_sdi_send_buffer+0x4a>
		vs1003_await_data_request();
 8000d74:	f7ff ff28 	bl	8000bc8 <vs1003_await_data_request>
		delayMicroseconds(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ff17 	bl	8000bac <delayMicroseconds>

		size_t chunk_length = find_min(len, vs1003_chunk_size);
 8000d7e:	2320      	movs	r3, #32
 8000d80:	4619      	mov	r1, r3
 8000d82:	6838      	ldr	r0, [r7, #0]
 8000d84:	f7ff ff6c 	bl	8000c60 <find_min>
 8000d88:	60f8      	str	r0, [r7, #12]
		len -= chunk_length;
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	603b      	str	r3, [r7, #0]
		while (chunk_length--)
 8000d92:	e007      	b.n	8000da4 <vs1003_sdi_send_buffer+0x40>
			HAL_SPI_Transmit(&hspi2, data++, 1, 100);
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	1c4b      	adds	r3, r1, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	2364      	movs	r3, #100	@ 0x64
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <vs1003_sdi_send_buffer+0x5c>)
 8000da0:	f001 f971 	bl	8002086 <HAL_SPI_Transmit>
		while (chunk_length--)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	60fa      	str	r2, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f2      	bne.n	8000d94 <vs1003_sdi_send_buffer+0x30>
	while (len) {
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1df      	bne.n	8000d74 <vs1003_sdi_send_buffer+0x10>
	}
	vs1003_data_mode_off();
 8000db4:	f7ff ff48 	bl	8000c48 <vs1003_data_mode_off>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000095c 	.word	0x2000095c

08000dc4 <vs1003_begin>:

/**
 *@brief initialize sensor
 *@TODO check this software reset why it is there, do we need it
 * */
void vs1003_begin(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

// Keep the chip in reset until we are ready
	HAL_GPIO_WritePin(VS1003_RESET_PORT, VS1003_RESET_PIN, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2101      	movs	r1, #1
 8000dcc:	482b      	ldr	r0, [pc, #172]	@ (8000e7c <vs1003_begin+0xb8>)
 8000dce:	f000 fbf9 	bl	80015c4 <HAL_GPIO_WritePin>

// The SCI and SDI will start deselected
	HAL_GPIO_WritePin(VS1003_CS_PORT, VS1003_CS_PIN, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4829      	ldr	r0, [pc, #164]	@ (8000e7c <vs1003_begin+0xb8>)
 8000dd8:	f000 fbf4 	bl	80015c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VS1003_DCS_PORT, VS1003_DCS_PIN, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2102      	movs	r1, #2
 8000de0:	4827      	ldr	r0, [pc, #156]	@ (8000e80 <vs1003_begin+0xbc>)
 8000de2:	f000 fbef 	bl	80015c4 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f956 	bl	8001098 <HAL_Delay>

// release from reset
	HAL_GPIO_WritePin(VS1003_RESET_PORT, VS1003_RESET_PIN, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2101      	movs	r1, #1
 8000df0:	4822      	ldr	r0, [pc, #136]	@ (8000e7c <vs1003_begin+0xb8>)
 8000df2:	f000 fbe7 	bl	80015c4 <HAL_GPIO_WritePin>

// Declick: Immediately switch analog off //ANALOG POWER DOWN MODE, sec-8.6.11 pg-36 datasheet
	vs1003_write_register(SCI_VOL, 0xffff); // VOL
 8000df6:	230b      	movs	r3, #11
 8000df8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff83 	bl	8000d08 <vs1003_write_register>

	/* Declick: Slow sample rate for slow analog part startup */
	vs1003_write_register(SCI_AUDATA, 10);
 8000e02:	2305      	movs	r3, #5
 8000e04:	210a      	movs	r1, #10
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff7e 	bl	8000d08 <vs1003_write_register>

	HAL_Delay(100);
 8000e0c:	2064      	movs	r0, #100	@ 0x64
 8000e0e:	f000 f943 	bl	8001098 <HAL_Delay>

	/* Switch on the analog parts */
	vs1003_write_register(SCI_VOL, 0xfefe); // VOL
 8000e12:	230b      	movs	r3, #11
 8000e14:	f64f 61fe 	movw	r1, #65278	@ 0xfefe
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff75 	bl	8000d08 <vs1003_write_register>

//	printf_P(PSTR("VS1003 still booting\r\n"));

	vs1003_write_register(SCI_AUDATA, 44101); // 44.1kHz stereo
 8000e1e:	2305      	movs	r3, #5
 8000e20:	f64a 4145 	movw	r1, #44101	@ 0xac45
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff6f 	bl	8000d08 <vs1003_write_register>

	vs1003_write_register(SCI_VOL, 0x2020); // VOL
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff69 	bl	8000d08 <vs1003_write_register>

// soft reset
	vs1003_write_register(SCI_MODE, (1 << SM_SDINEW) | (1 << SM_RESET));
 8000e36:	2000      	movs	r0, #0
 8000e38:	230b      	movs	r3, #11
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	2302      	movs	r3, #2
 8000e44:	4619      	mov	r1, r3
 8000e46:	2301      	movs	r3, #1
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff ff58 	bl	8000d08 <vs1003_write_register>
	HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 f91d 	bl	8001098 <HAL_Delay>
	vs1003_await_data_request();
 8000e5e:	f7ff feb3 	bl	8000bc8 <vs1003_await_data_request>
	vs1003_write_register(SCI_CLOCKF, 0xB800); // Experimenting with higher clock settings
 8000e62:	2303      	movs	r3, #3
 8000e64:	f44f 4138 	mov.w	r1, #47104	@ 0xb800
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff4d 	bl	8000d08 <vs1003_write_register>
	HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 f912 	bl	8001098 <HAL_Delay>
	vs1003_await_data_request();
 8000e74:	f7ff fea8 	bl	8000bc8 <vs1003_await_data_request>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800

08000e84 <vs1003_setVolume>:
 * @brief set volume
 * @param uint8_t volume (0-255 LOWER IS LOUDER)
 * DUPLICATING IS TO PUTTING VOLUME FOR LEFT AND RIGHT CHANNEL
 * */

void vs1003_setVolume(uint8_t vol) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	uint16_t value = vol;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	81fb      	strh	r3, [r7, #14]
	value <<= 8;
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	81fb      	strh	r3, [r7, #14]
	value |= vol;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	81fb      	strh	r3, [r7, #14]

	vs1003_write_register(SCI_VOL, value); // VOL
 8000ea2:	220b      	movs	r2, #11
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f7ff ff2d 	bl	8000d08 <vs1003_write_register>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <vs1003_playChunk>:
/**
 * @brief play a chunk of data
 * @param uint8_t *data
 * @param size_t length of data
 * */
void vs1003_playChunk(uint8_t *data, size_t len) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
	vs1003_sdi_send_buffer(data, len);
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff4e 	bl	8000d64 <vs1003_sdi_send_buffer>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <vs1003_print_register_data>:
/**
 * @brief print a single register data
 * @param uint8_t registerAddress
 * */

void vs1003_print_register_data(uint8_t reg) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b090      	sub	sp, #64	@ 0x40
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue = vs1003_read_register(reg);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fecf 	bl	8000c80 <vs1003_read_register>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	char str[50];
	sprintf(str, "register address %#X Data is %#X \n", reg, readValue);
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000eea:	f107 000c 	add.w	r0, r7, #12
 8000eee:	490a      	ldr	r1, [pc, #40]	@ (8000f18 <vs1003_print_register_data+0x48>)
 8000ef0:	f002 fa22 	bl	8003338 <siprintf>
	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str),
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f989 	bl	8000210 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f107 010c 	add.w	r1, r7, #12
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <vs1003_print_register_data+0x4c>)
 8000f0c:	f001 fe58 	bl	8002bc0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8000f10:	bf00      	nop
 8000f12:	3740      	adds	r7, #64	@ 0x40
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08003c90 	.word	0x08003c90
 8000f1c:	200009b4 	.word	0x200009b4

08000f20 <vs1003_print_all_register_details>:
/*
 * @brief print complete details of the chip
 * read all registers and print it
 * */

void vs1003_print_all_register_details(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= SCI_num_registers; i++) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
 8000f2a:	e006      	b.n	8000f3a <vs1003_print_all_register_details+0x1a>
		vs1003_print_register_data(i);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ffce 	bl	8000ed0 <vs1003_print_register_data>
	for (uint8_t i = 0; i <= SCI_num_registers; i++) {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	3301      	adds	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d9f4      	bls.n	8000f2c <vs1003_print_all_register_details+0xc>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) "**************\n", 15, 100);
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	220f      	movs	r2, #15
 8000f46:	4904      	ldr	r1, [pc, #16]	@ (8000f58 <vs1003_print_all_register_details+0x38>)
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <vs1003_print_all_register_details+0x3c>)
 8000f4a:	f001 fe39 	bl	8002bc0 <HAL_UART_Transmit>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08003cb4 	.word	0x08003cb4
 8000f5c:	200009b4 	.word	0x200009b4

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f64:	f7ff fe10 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	@ (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f002 fa01 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fb0d 	bl	80005b0 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000940 	.word	0x20000940
  ldr r2, =_sidata
 8000fa4:	08003d20 	.word	0x08003d20
  ldr r2, =_sbss
 8000fa8:	20000940 	.word	0x20000940
  ldr r4, =_ebss
 8000fac:	20000b4c 	.word	0x20000b4c

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <HAL_Init+0x40>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_Init+0x40>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <HAL_Init+0x40>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f931 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fc90 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f93b 	bl	8001292 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f911 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200008e0 	.word	0x200008e0
 8001050:	200008ec 	.word	0x200008ec
 8001054:	200008e8 	.word	0x200008e8

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200008ec 	.word	0x200008ec
 800107c:	20000a00 	.word	0x20000a00

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000a00 	.word	0x20000a00

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200008ec 	.word	0x200008ec

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff47 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff5c 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffb0 	bl	8001200 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	@ 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e14d      	b.n	8001564 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 813c 	bne.w	800155e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 8096 	beq.w	800155e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b51      	ldr	r3, [pc, #324]	@ (800157c <HAL_GPIO_Init+0x2d0>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a50      	ldr	r2, [pc, #320]	@ (800157c <HAL_GPIO_Init+0x2d0>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b4e      	ldr	r3, [pc, #312]	@ (800157c <HAL_GPIO_Init+0x2d0>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a4c      	ldr	r2, [pc, #304]	@ (8001580 <HAL_GPIO_Init+0x2d4>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a43      	ldr	r2, [pc, #268]	@ (8001584 <HAL_GPIO_Init+0x2d8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x1ea>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a42      	ldr	r2, [pc, #264]	@ (8001588 <HAL_GPIO_Init+0x2dc>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x1e6>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a41      	ldr	r2, [pc, #260]	@ (800158c <HAL_GPIO_Init+0x2e0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x1e2>
 800148a:	2302      	movs	r3, #2
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x1ec>
 800148e:	2307      	movs	r3, #7
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x1ec>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x1ec>
 8001496:	2300      	movs	r3, #0
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	f002 0203 	and.w	r2, r2, #3
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4093      	lsls	r3, r2
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a8:	4935      	ldr	r1, [pc, #212]	@ (8001580 <HAL_GPIO_Init+0x2d4>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b6:	4b36      	ldr	r3, [pc, #216]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014da:	4a2d      	ldr	r2, [pc, #180]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001504:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_GPIO_Init+0x2e4>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3301      	adds	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	f67f aeae 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3724      	adds	r7, #36	@ 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40013800 	.word	0x40013800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40020800 	.word	0x40020800
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e001      	b.n	80015b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
 80015d0:	4613      	mov	r3, r2
 80015d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d4:	787b      	ldrb	r3, [r7, #1]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e0:	e003      	b.n	80015ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001608:	887a      	ldrh	r2, [r7, #2]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	041a      	lsls	r2, r3, #16
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43d9      	mvns	r1, r3
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	400b      	ands	r3, r1
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	619a      	str	r2, [r3, #24]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0cc      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b68      	ldr	r3, [pc, #416]	@ (80017e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d90c      	bls.n	8001668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b63      	ldr	r3, [pc, #396]	@ (80017e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0b8      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001680:	4b59      	ldr	r3, [pc, #356]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a58      	ldr	r2, [pc, #352]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800168a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001698:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a52      	ldr	r2, [pc, #328]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b50      	ldr	r3, [pc, #320]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	494d      	ldr	r1, [pc, #308]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d044      	beq.n	800174c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d119      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e07f      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d003      	beq.n	80016ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b3f      	ldr	r3, [pc, #252]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06f      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e067      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4934      	ldr	r1, [pc, #208]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff fcb0 	bl	8001080 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff fcac 	bl	8001080 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e04f      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 020c 	and.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d1eb      	bne.n	8001724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800174c:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d20c      	bcs.n	8001774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e032      	b.n	80017da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4916      	ldr	r1, [pc, #88]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	490e      	ldr	r1, [pc, #56]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b2:	f000 f821 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 80017b6:	4602      	mov	r2, r0
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	490a      	ldr	r1, [pc, #40]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	5ccb      	ldrb	r3, [r1, r3]
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fc10 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023c00 	.word	0x40023c00
 80017e8:	40023800 	.word	0x40023800
 80017ec:	08003cc4 	.word	0x08003cc4
 80017f0:	200008e0 	.word	0x200008e0
 80017f4:	200008e8 	.word	0x200008e8

080017f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017fc:	b094      	sub	sp, #80	@ 0x50
 80017fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	647b      	str	r3, [r7, #68]	@ 0x44
 8001804:	2300      	movs	r3, #0
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001808:	2300      	movs	r3, #0
 800180a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001810:	4b79      	ldr	r3, [pc, #484]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d00d      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x40>
 800181c:	2b08      	cmp	r3, #8
 800181e:	f200 80e1 	bhi.w	80019e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x34>
 8001826:	2b04      	cmp	r3, #4
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x3a>
 800182a:	e0db      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b73      	ldr	r3, [pc, #460]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x204>)
 800182e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001830:	e0db      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001832:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001836:	e0d8      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001838:	4b6f      	ldr	r3, [pc, #444]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001840:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001842:	4b6d      	ldr	r3, [pc, #436]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d063      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184e:	4b6a      	ldr	r3, [pc, #424]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	2200      	movs	r2, #0
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001858:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800185a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800185c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001860:	633b      	str	r3, [r7, #48]	@ 0x30
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
 8001866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800186a:	4622      	mov	r2, r4
 800186c:	462b      	mov	r3, r5
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4621      	mov	r1, r4
 8001884:	1a51      	subs	r1, r2, r1
 8001886:	6139      	str	r1, [r7, #16]
 8001888:	4629      	mov	r1, r5
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800189c:	4659      	mov	r1, fp
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4651      	mov	r1, sl
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	4651      	mov	r1, sl
 80018a8:	018a      	lsls	r2, r1, #6
 80018aa:	4651      	mov	r1, sl
 80018ac:	ebb2 0801 	subs.w	r8, r2, r1
 80018b0:	4659      	mov	r1, fp
 80018b2:	eb63 0901 	sbc.w	r9, r3, r1
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ca:	4690      	mov	r8, r2
 80018cc:	4699      	mov	r9, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	eb18 0303 	adds.w	r3, r8, r3
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	462b      	mov	r3, r5
 80018d8:	eb49 0303 	adc.w	r3, r9, r3
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018ea:	4629      	mov	r1, r5
 80018ec:	024b      	lsls	r3, r1, #9
 80018ee:	4621      	mov	r1, r4
 80018f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018f4:	4621      	mov	r1, r4
 80018f6:	024a      	lsls	r2, r1, #9
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fe:	2200      	movs	r2, #0
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001908:	f7fe fcda 	bl	80002c0 <__aeabi_uldivmod>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4613      	mov	r3, r2
 8001912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001914:	e058      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	2200      	movs	r2, #0
 800191e:	4618      	mov	r0, r3
 8001920:	4611      	mov	r1, r2
 8001922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
 800192c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001930:	4642      	mov	r2, r8
 8001932:	464b      	mov	r3, r9
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	0159      	lsls	r1, r3, #5
 800193e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001942:	0150      	lsls	r0, r2, #5
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4641      	mov	r1, r8
 800194a:	ebb2 0a01 	subs.w	sl, r2, r1
 800194e:	4649      	mov	r1, r9
 8001950:	eb63 0b01 	sbc.w	fp, r3, r1
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001968:	ebb2 040a 	subs.w	r4, r2, sl
 800196c:	eb63 050b 	sbc.w	r5, r3, fp
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	00eb      	lsls	r3, r5, #3
 800197a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197e:	00e2      	lsls	r2, r4, #3
 8001980:	4614      	mov	r4, r2
 8001982:	461d      	mov	r5, r3
 8001984:	4643      	mov	r3, r8
 8001986:	18e3      	adds	r3, r4, r3
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	464b      	mov	r3, r9
 800198c:	eb45 0303 	adc.w	r3, r5, r3
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199e:	4629      	mov	r1, r5
 80019a0:	028b      	lsls	r3, r1, #10
 80019a2:	4621      	mov	r1, r4
 80019a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a8:	4621      	mov	r1, r4
 80019aa:	028a      	lsls	r2, r1, #10
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019b2:	2200      	movs	r2, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	61fa      	str	r2, [r7, #28]
 80019b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019bc:	f7fe fc80 	bl	80002c0 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4613      	mov	r3, r2
 80019c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	3301      	adds	r3, #1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80019d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019e2:	e002      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x204>)
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3750      	adds	r7, #80	@ 0x50
 80019f0:	46bd      	mov	sp, r7
 80019f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	007a1200 	.word	0x007a1200

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200008e0 	.word	0x200008e0

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a20:	f7ff fff0 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0a9b      	lsrs	r3, r3, #10
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	@ (8001a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	08003cd4 	.word	0x08003cd4

08001a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a48:	f7ff ffdc 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0b5b      	lsrs	r3, r3, #13
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	@ (8001a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08003cd4 	.word	0x08003cd4

08001a6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e273      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d075      	beq.n	8001b76 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a8a:	4b88      	ldr	r3, [pc, #544]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d00c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b85      	ldr	r3, [pc, #532]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d112      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4b82      	ldr	r3, [pc, #520]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d05b      	beq.n	8001b74 <HAL_RCC_OscConfig+0x108>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d157      	bne.n	8001b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e24e      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x74>
 8001ad2:	4b76      	ldr	r3, [pc, #472]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a75      	ldr	r2, [pc, #468]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xb0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b70      	ldr	r3, [pc, #448]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6f      	ldr	r2, [pc, #444]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b6d      	ldr	r3, [pc, #436]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6c      	ldr	r2, [pc, #432]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xb0>
 8001b04:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a68      	ldr	r2, [pc, #416]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff faac 	bl	8001080 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff faa8 	bl	8001080 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e213      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xc0>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa98 	bl	8001080 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fa94 	bl	8001080 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	@ 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1ff      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b51      	ldr	r3, [pc, #324]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0xe8>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b82:	4b4a      	ldr	r3, [pc, #296]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b47      	ldr	r3, [pc, #284]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b41      	ldr	r3, [pc, #260]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x152>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1d3      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4937      	ldr	r1, [pc, #220]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <HAL_RCC_OscConfig+0x244>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa4d 	bl	8001080 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fa49 	bl	8001080 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1b4      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4925      	ldr	r1, [pc, #148]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <HAL_RCC_OscConfig+0x244>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fa2c 	bl	8001080 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fa28 	bl	8001080 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e193      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d036      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_RCC_OscConfig+0x248>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff fa0c 	bl	8001080 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fa08 	bl	8001080 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e173      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x200>
 8001c8a:	e01b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_RCC_OscConfig+0x248>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff f9f5 	bl	8001080 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	e00e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f9f1 	bl	8001080 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d907      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e15c      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	42470000 	.word	0x42470000
 8001cb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ea      	bne.n	8001c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8097 	beq.w	8001e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b83      	ldr	r3, [pc, #524]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b79      	ldr	r3, [pc, #484]	@ (8001ee8 <HAL_RCC_OscConfig+0x47c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ee8 <HAL_RCC_OscConfig+0x47c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a75      	ldr	r2, [pc, #468]	@ (8001ee8 <HAL_RCC_OscConfig+0x47c>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f9b1 	bl	8001080 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff f9ad 	bl	8001080 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e118      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee8 <HAL_RCC_OscConfig+0x47c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2ea>
 8001d48:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x324>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x30c>
 8001d5e:	4b61      	ldr	r3, [pc, #388]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	4a60      	ldr	r2, [pc, #384]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0x324>
 8001d78:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	4a59      	ldr	r2, [pc, #356]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d84:	4b57      	ldr	r3, [pc, #348]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d88:	4a56      	ldr	r2, [pc, #344]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d015      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff f972 	bl	8001080 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7ff f96e 	bl	8001080 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0d7      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ee      	beq.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f95c 	bl	8001080 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7ff f958 	bl	8001080 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0c1      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ee      	bne.n	8001dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80ad 	beq.w	8001f64 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d060      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d145      	bne.n	8001eaa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <HAL_RCC_OscConfig+0x480>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff f92c 	bl	8001080 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff f928 	bl	8001080 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e093      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	061b      	lsls	r3, r3, #24
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	071b      	lsls	r3, r3, #28
 8001e76:	491b      	ldr	r1, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_RCC_OscConfig+0x480>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff f8fd 	bl	8001080 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff f8f9 	bl	8001080 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e064      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x41e>
 8001ea8:	e05c      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_RCC_OscConfig+0x480>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f8e6 	bl	8001080 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff f8e2 	bl	8001080 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04d      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x44c>
 8001ed6:	e045      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e040      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d030      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d129      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d122      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d119      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10f      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07b      	b.n	800207e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f96:	d009      	beq.n	8001fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
 8001f9e:	e005      	b.n	8001fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fcc8 	bl	800095c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	ea42 0103 	orr.w	r1, r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0104 	and.w	r1, r3, #4
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	f003 0210 	and.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800206c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b088      	sub	sp, #32
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_SPI_Transmit+0x22>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e12d      	b.n	8002304 <HAL_SPI_Transmit+0x27e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b0:	f7fe ffe6 	bl	8001080 <HAL_GetTick>
 80020b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d002      	beq.n	80020cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020ca:	e116      	b.n	80022fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_SPI_Transmit+0x52>
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020dc:	e10d      	b.n	80022fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002124:	d10f      	bne.n	8002146 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002134:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002144:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d007      	beq.n	8002164 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800216c:	d14f      	bne.n	800220e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_SPI_Transmit+0xf6>
 8002176:	8afb      	ldrh	r3, [r7, #22]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d142      	bne.n	8002202 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021a0:	e02f      	b.n	8002202 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d112      	bne.n	80021d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	1c9a      	adds	r2, r3, #2
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021d4:	e015      	b.n	8002202 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d6:	f7fe ff53 	bl	8001080 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d803      	bhi.n	80021ee <HAL_SPI_Transmit+0x168>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d102      	bne.n	80021f4 <HAL_SPI_Transmit+0x16e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002200:	e07b      	b.n	80022fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ca      	bne.n	80021a2 <HAL_SPI_Transmit+0x11c>
 800220c:	e050      	b.n	80022b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_SPI_Transmit+0x196>
 8002216:	8afb      	ldrh	r3, [r7, #22]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d144      	bne.n	80022a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002242:	e030      	b.n	80022a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d113      	bne.n	800227a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	330c      	adds	r3, #12
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002278:	e015      	b.n	80022a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227a:	f7fe ff01 	bl	8001080 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d803      	bhi.n	8002292 <HAL_SPI_Transmit+0x20c>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d102      	bne.n	8002298 <HAL_SPI_Transmit+0x212>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80022a4:	e029      	b.n	80022fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1c9      	bne.n	8002244 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fbdf 	bl	8002a78 <SPI_EndRxTxTransaction>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	e003      	b.n	80022fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002302:	7ffb      	ldrb	r3, [r7, #31]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002330:	e0fb      	b.n	800252a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800233a:	d112      	bne.n	8002362 <HAL_SPI_Receive+0x56>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2204      	movs	r2, #4
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8ef 	bl	800253c <HAL_SPI_TransmitReceive>
 800235e:	4603      	mov	r3, r0
 8002360:	e0e8      	b.n	8002534 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_SPI_Receive+0x64>
 800236c:	2302      	movs	r3, #2
 800236e:	e0e1      	b.n	8002534 <HAL_SPI_Receive+0x228>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002378:	f7fe fe82 	bl	8001080 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Receive+0x7e>
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800238e:	e0cc      	b.n	800252a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2204      	movs	r2, #4
 8002394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	88fa      	ldrh	r2, [r7, #6]
 80023ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d6:	d10f      	bne.n	80023f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002402:	2b40      	cmp	r3, #64	@ 0x40
 8002404:	d007      	beq.n	8002416 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d16a      	bne.n	80024f4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800241e:	e032      	b.n	8002486 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d115      	bne.n	800245a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f103 020c 	add.w	r2, r3, #12
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002458:	e015      	b.n	8002486 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245a:	f7fe fe11 	bl	8001080 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d803      	bhi.n	8002472 <HAL_SPI_Receive+0x166>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d102      	bne.n	8002478 <HAL_SPI_Receive+0x16c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002484:	e051      	b.n	800252a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1c7      	bne.n	8002420 <HAL_SPI_Receive+0x114>
 8002490:	e035      	b.n	80024fe <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d113      	bne.n	80024c8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	b292      	uxth	r2, r2
 80024ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	1c9a      	adds	r2, r3, #2
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024c6:	e015      	b.n	80024f4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024c8:	f7fe fdda 	bl	8001080 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d803      	bhi.n	80024e0 <HAL_SPI_Receive+0x1d4>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Receive+0x1da>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80024f2:	e01a      	b.n	800252a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1c9      	bne.n	8002492 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fa52 	bl	80029ac <SPI_EndRxTransaction>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	75fb      	strb	r3, [r7, #23]
 8002520:	e003      	b.n	800252a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	@ 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800254a:	2301      	movs	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x26>
 800255e:	2302      	movs	r3, #2
 8002560:	e198      	b.n	8002894 <HAL_SPI_TransmitReceive+0x358>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800256a:	f7fe fd89 	bl	8001080 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002584:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002588:	2b01      	cmp	r3, #1
 800258a:	d00f      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x70>
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002592:	d107      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x68>
 800259c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d003      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80025aa:	e16d      	b.n	8002888 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_SPI_TransmitReceive+0x82>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_SPI_TransmitReceive+0x82>
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80025c4:	e160      	b.n	8002888 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d003      	beq.n	80025da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261a:	2b40      	cmp	r3, #64	@ 0x40
 800261c:	d007      	beq.n	800262e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002636:	d17c      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x10a>
 8002640:	8b7b      	ldrh	r3, [r7, #26]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d16a      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266a:	e057      	b.n	800271c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d11b      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x176>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x176>
 8002684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d113      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	1c9a      	adds	r2, r3, #2
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d119      	bne.n	80026f4 <HAL_SPI_TransmitReceive+0x1b8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d014      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	b292      	uxth	r2, r2
 80026d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	1c9a      	adds	r2, r3, #2
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026f0:	2301      	movs	r3, #1
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026f4:	f7fe fcc4 	bl	8001080 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002700:	429a      	cmp	r2, r3
 8002702:	d80b      	bhi.n	800271c <HAL_SPI_TransmitReceive+0x1e0>
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d007      	beq.n	800271c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800271a:	e0b5      	b.n	8002888 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1a2      	bne.n	800266c <HAL_SPI_TransmitReceive+0x130>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d19d      	bne.n	800266c <HAL_SPI_TransmitReceive+0x130>
 8002730:	e080      	b.n	8002834 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x204>
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d16f      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002766:	e05b      	b.n	8002820 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d11c      	bne.n	80027b0 <HAL_SPI_TransmitReceive+0x274>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d017      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x274>
 8002780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d114      	bne.n	80027b0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d119      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x2b6>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d014      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ee:	2301      	movs	r3, #1
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027f2:	f7fe fc45 	bl	8001080 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027fe:	429a      	cmp	r2, r3
 8002800:	d803      	bhi.n	800280a <HAL_SPI_TransmitReceive+0x2ce>
 8002802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d102      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x2d4>
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800281e:	e033      	b.n	8002888 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d19e      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x22c>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d199      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002836:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f91d 	bl	8002a78 <SPI_EndRxTxTransaction>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002850:	e01a      	b.n	8002888 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800287e:	e003      	b.n	8002888 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002890:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002894:	4618      	mov	r0, r3
 8002896:	3730      	adds	r7, #48	@ 0x30
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028ac:	f7fe fbe8 	bl	8001080 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028bc:	f7fe fbe0 	bl	8001080 <HAL_GetTick>
 80028c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c2:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	e054      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d050      	beq.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028dc:	f7fe fbd0 	bl	8001080 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290a:	d111      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002914:	d004      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291e:	d107      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002938:	d10f      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e017      	b.n	800299e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d19b      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200008e0 	.word	0x200008e0

080029ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c0:	d111      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ca:	d004      	beq.n	80029d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d4:	d107      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ee:	d12a      	bne.n	8002a46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f8:	d012      	beq.n	8002a20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	@ 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff49 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02d      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e026      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2101      	movs	r1, #1
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff36 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e013      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2101      	movs	r1, #1
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff23 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff04 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e032      	b.n	8002b10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <SPI_EndRxTxTransaction+0xa0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <SPI_EndRxTxTransaction+0xa4>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	0d5b      	lsrs	r3, r3, #21
 8002ab6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ac8:	d112      	bne.n	8002af0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2180      	movs	r1, #128	@ 0x80
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fee1 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d016      	beq.n	8002b0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e00f      	b.n	8002b10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b06:	2b80      	cmp	r3, #128	@ 0x80
 8002b08:	d0f2      	beq.n	8002af0 <SPI_EndRxTxTransaction+0x78>
 8002b0a:	e000      	b.n	8002b0e <SPI_EndRxTxTransaction+0x96>
        break;
 8002b0c:	bf00      	nop
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200008e0 	.word	0x200008e0
 8002b1c:	165e9f81 	.word	0x165e9f81

08002b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e042      	b.n	8002bb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd ff70 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	@ 0x24
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f973 	bl	8002e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d175      	bne.n	8002ccc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_UART_Transmit+0x2c>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e06e      	b.n	8002cce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2221      	movs	r2, #33	@ 0x21
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fa3f 	bl	8001080 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c18:	d108      	bne.n	8002c2c <HAL_UART_Transmit+0x6c>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e003      	b.n	8002c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c34:	e02e      	b.n	8002c94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2180      	movs	r1, #128	@ 0x80
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f848 	bl	8002cd6 <UART_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e03a      	b.n	8002cce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3302      	adds	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e007      	b.n	8002c86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1cb      	bne.n	8002c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2140      	movs	r1, #64	@ 0x40
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f814 	bl	8002cd6 <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e006      	b.n	8002cce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e000      	b.n	8002cce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
  }
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce6:	e03b      	b.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d037      	beq.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf0:	f7fe f9c6 	bl	8001080 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d302      	bcc.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e03a      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b80      	cmp	r3, #128	@ 0x80
 8002d1c:	d020      	beq.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b40      	cmp	r3, #64	@ 0x40
 8002d22:	d01d      	beq.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d116      	bne.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f81d 	bl	8002d88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2208      	movs	r2, #8
 8002d52:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00f      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d0b4      	beq.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b095      	sub	sp, #84	@ 0x54
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002db0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e5      	bne.n	8002d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3314      	adds	r3, #20
 8002de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e20:	61ba      	str	r2, [r7, #24]
 8002e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6979      	ldr	r1, [r7, #20]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e42:	bf00      	nop
 8002e44:	3754      	adds	r7, #84	@ 0x54
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b0c0      	sub	sp, #256	@ 0x100
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	ea40 0301 	orr.w	r3, r0, r1
 8002e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ea8:	f021 010c 	bic.w	r1, r1, #12
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eca:	6999      	ldr	r1, [r3, #24]
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	ea40 0301 	orr.w	r3, r0, r1
 8002ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4b8f      	ldr	r3, [pc, #572]	@ (800311c <UART_SetConfig+0x2cc>)
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0xa0>
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b8d      	ldr	r3, [pc, #564]	@ (8003120 <UART_SetConfig+0x2d0>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d104      	bne.n	8002efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7fe fda8 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ef8:	e003      	b.n	8002f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002efa:	f7fe fd8f 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8002efe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f0c:	f040 810c 	bne.w	8003128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f22:	4622      	mov	r2, r4
 8002f24:	462b      	mov	r3, r5
 8002f26:	1891      	adds	r1, r2, r2
 8002f28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f32:	4621      	mov	r1, r4
 8002f34:	eb12 0801 	adds.w	r8, r2, r1
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb43 0901 	adc.w	r9, r3, r1
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f52:	4690      	mov	r8, r2
 8002f54:	4699      	mov	r9, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	eb18 0303 	adds.w	r3, r8, r3
 8002f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f60:	462b      	mov	r3, r5
 8002f62:	eb49 0303 	adc.w	r3, r9, r3
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f7e:	460b      	mov	r3, r1
 8002f80:	18db      	adds	r3, r3, r3
 8002f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f84:	4613      	mov	r3, r2
 8002f86:	eb42 0303 	adc.w	r3, r2, r3
 8002f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f94:	f7fd f994 	bl	80002c0 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <UART_SetConfig+0x2d4>)
 8002f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011c      	lsls	r4, r3, #4
 8002fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fc8:	4641      	mov	r1, r8
 8002fca:	eb12 0a01 	adds.w	sl, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe8:	4692      	mov	sl, r2
 8002fea:	469b      	mov	fp, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	eb1a 0303 	adds.w	r3, sl, r3
 8002ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800300c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003014:	460b      	mov	r3, r1
 8003016:	18db      	adds	r3, r3, r3
 8003018:	643b      	str	r3, [r7, #64]	@ 0x40
 800301a:	4613      	mov	r3, r2
 800301c:	eb42 0303 	adc.w	r3, r2, r3
 8003020:	647b      	str	r3, [r7, #68]	@ 0x44
 8003022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800302a:	f7fd f949 	bl	80002c0 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4611      	mov	r1, r2
 8003034:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <UART_SetConfig+0x2d4>)
 8003036:	fba3 2301 	umull	r2, r3, r3, r1
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2264      	movs	r2, #100	@ 0x64
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	1acb      	subs	r3, r1, r3
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800304a:	4b36      	ldr	r3, [pc, #216]	@ (8003124 <UART_SetConfig+0x2d4>)
 800304c:	fba3 2302 	umull	r2, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003058:	441c      	add	r4, r3
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003064:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	1891      	adds	r1, r2, r2
 8003072:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003074:	415b      	adcs	r3, r3
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800307c:	4641      	mov	r1, r8
 800307e:	1851      	adds	r1, r2, r1
 8003080:	6339      	str	r1, [r7, #48]	@ 0x30
 8003082:	4649      	mov	r1, r9
 8003084:	414b      	adcs	r3, r1
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003094:	4659      	mov	r1, fp
 8003096:	00cb      	lsls	r3, r1, #3
 8003098:	4651      	mov	r1, sl
 800309a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309e:	4651      	mov	r1, sl
 80030a0:	00ca      	lsls	r2, r1, #3
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	4642      	mov	r2, r8
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030b0:	464b      	mov	r3, r9
 80030b2:	460a      	mov	r2, r1
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030d0:	460b      	mov	r3, r1
 80030d2:	18db      	adds	r3, r3, r3
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030d6:	4613      	mov	r3, r2
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030e6:	f7fd f8eb 	bl	80002c0 <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <UART_SetConfig+0x2d4>)
 80030f0:	fba3 1302 	umull	r1, r3, r3, r2
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	2164      	movs	r1, #100	@ 0x64
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	3332      	adds	r3, #50	@ 0x32
 8003102:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <UART_SetConfig+0x2d4>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	f003 0207 	and.w	r2, r3, #7
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4422      	add	r2, r4
 8003116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003118:	e106      	b.n	8003328 <UART_SetConfig+0x4d8>
 800311a:	bf00      	nop
 800311c:	40011000 	.word	0x40011000
 8003120:	40011400 	.word	0x40011400
 8003124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003132:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800313a:	4642      	mov	r2, r8
 800313c:	464b      	mov	r3, r9
 800313e:	1891      	adds	r1, r2, r2
 8003140:	6239      	str	r1, [r7, #32]
 8003142:	415b      	adcs	r3, r3
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
 8003146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800314a:	4641      	mov	r1, r8
 800314c:	1854      	adds	r4, r2, r1
 800314e:	4649      	mov	r1, r9
 8003150:	eb43 0501 	adc.w	r5, r3, r1
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	00eb      	lsls	r3, r5, #3
 800315e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003162:	00e2      	lsls	r2, r4, #3
 8003164:	4614      	mov	r4, r2
 8003166:	461d      	mov	r5, r3
 8003168:	4643      	mov	r3, r8
 800316a:	18e3      	adds	r3, r4, r3
 800316c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003170:	464b      	mov	r3, r9
 8003172:	eb45 0303 	adc.w	r3, r5, r3
 8003176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003186:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003196:	4629      	mov	r1, r5
 8003198:	008b      	lsls	r3, r1, #2
 800319a:	4621      	mov	r1, r4
 800319c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a0:	4621      	mov	r1, r4
 80031a2:	008a      	lsls	r2, r1, #2
 80031a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031a8:	f7fd f88a 	bl	80002c0 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4b60      	ldr	r3, [pc, #384]	@ (8003334 <UART_SetConfig+0x4e4>)
 80031b2:	fba3 2302 	umull	r2, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	011c      	lsls	r4, r3, #4
 80031ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	1891      	adds	r1, r2, r2
 80031d2:	61b9      	str	r1, [r7, #24]
 80031d4:	415b      	adcs	r3, r3
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031dc:	4641      	mov	r1, r8
 80031de:	1851      	adds	r1, r2, r1
 80031e0:	6139      	str	r1, [r7, #16]
 80031e2:	4649      	mov	r1, r9
 80031e4:	414b      	adcs	r3, r1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f4:	4659      	mov	r1, fp
 80031f6:	00cb      	lsls	r3, r1, #3
 80031f8:	4651      	mov	r1, sl
 80031fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fe:	4651      	mov	r1, sl
 8003200:	00ca      	lsls	r2, r1, #3
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4603      	mov	r3, r0
 8003208:	4642      	mov	r2, r8
 800320a:	189b      	adds	r3, r3, r2
 800320c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003210:	464b      	mov	r3, r9
 8003212:	460a      	mov	r2, r1
 8003214:	eb42 0303 	adc.w	r3, r2, r3
 8003218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003226:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003234:	4649      	mov	r1, r9
 8003236:	008b      	lsls	r3, r1, #2
 8003238:	4641      	mov	r1, r8
 800323a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323e:	4641      	mov	r1, r8
 8003240:	008a      	lsls	r2, r1, #2
 8003242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003246:	f7fd f83b 	bl	80002c0 <__aeabi_uldivmod>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4611      	mov	r1, r2
 8003250:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <UART_SetConfig+0x4e4>)
 8003252:	fba3 2301 	umull	r2, r3, r3, r1
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2264      	movs	r2, #100	@ 0x64
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	1acb      	subs	r3, r1, r3
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	3332      	adds	r3, #50	@ 0x32
 8003264:	4a33      	ldr	r2, [pc, #204]	@ (8003334 <UART_SetConfig+0x4e4>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003270:	441c      	add	r4, r3
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003276:	2200      	movs	r2, #0
 8003278:	673b      	str	r3, [r7, #112]	@ 0x70
 800327a:	677a      	str	r2, [r7, #116]	@ 0x74
 800327c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	415b      	adcs	r3, r3
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003290:	4641      	mov	r1, r8
 8003292:	1851      	adds	r1, r2, r1
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	4649      	mov	r1, r9
 8003298:	414b      	adcs	r3, r1
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a8:	4659      	mov	r1, fp
 80032aa:	00cb      	lsls	r3, r1, #3
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b2:	4651      	mov	r1, sl
 80032b4:	00ca      	lsls	r2, r1, #3
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	4642      	mov	r2, r8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032c2:	464b      	mov	r3, r9
 80032c4:	460a      	mov	r2, r1
 80032c6:	eb42 0303 	adc.w	r3, r2, r3
 80032ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80032d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032e4:	4649      	mov	r1, r9
 80032e6:	008b      	lsls	r3, r1, #2
 80032e8:	4641      	mov	r1, r8
 80032ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ee:	4641      	mov	r1, r8
 80032f0:	008a      	lsls	r2, r1, #2
 80032f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032f6:	f7fc ffe3 	bl	80002c0 <__aeabi_uldivmod>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <UART_SetConfig+0x4e4>)
 8003300:	fba3 1302 	umull	r1, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	2164      	movs	r1, #100	@ 0x64
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	3332      	adds	r3, #50	@ 0x32
 8003312:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <UART_SetConfig+0x4e4>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4422      	add	r2, r4
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800332e:	46bd      	mov	sp, r7
 8003330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003334:	51eb851f 	.word	0x51eb851f

08003338 <siprintf>:
 8003338:	b40e      	push	{r1, r2, r3}
 800333a:	b500      	push	{lr}
 800333c:	b09c      	sub	sp, #112	@ 0x70
 800333e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003340:	9002      	str	r0, [sp, #8]
 8003342:	9006      	str	r0, [sp, #24]
 8003344:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003348:	4809      	ldr	r0, [pc, #36]	@ (8003370 <siprintf+0x38>)
 800334a:	9107      	str	r1, [sp, #28]
 800334c:	9104      	str	r1, [sp, #16]
 800334e:	4909      	ldr	r1, [pc, #36]	@ (8003374 <siprintf+0x3c>)
 8003350:	f853 2b04 	ldr.w	r2, [r3], #4
 8003354:	9105      	str	r1, [sp, #20]
 8003356:	6800      	ldr	r0, [r0, #0]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	a902      	add	r1, sp, #8
 800335c:	f000 f994 	bl	8003688 <_svfiprintf_r>
 8003360:	9b02      	ldr	r3, [sp, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	b01c      	add	sp, #112	@ 0x70
 8003368:	f85d eb04 	ldr.w	lr, [sp], #4
 800336c:	b003      	add	sp, #12
 800336e:	4770      	bx	lr
 8003370:	200008f0 	.word	0x200008f0
 8003374:	ffff0208 	.word	0xffff0208

08003378 <memset>:
 8003378:	4402      	add	r2, r0
 800337a:	4603      	mov	r3, r0
 800337c:	4293      	cmp	r3, r2
 800337e:	d100      	bne.n	8003382 <memset+0xa>
 8003380:	4770      	bx	lr
 8003382:	f803 1b01 	strb.w	r1, [r3], #1
 8003386:	e7f9      	b.n	800337c <memset+0x4>

08003388 <__errno>:
 8003388:	4b01      	ldr	r3, [pc, #4]	@ (8003390 <__errno+0x8>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	200008f0 	.word	0x200008f0

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4d0d      	ldr	r5, [pc, #52]	@ (80033cc <__libc_init_array+0x38>)
 8003398:	4c0d      	ldr	r4, [pc, #52]	@ (80033d0 <__libc_init_array+0x3c>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	2600      	movs	r6, #0
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	4d0b      	ldr	r5, [pc, #44]	@ (80033d4 <__libc_init_array+0x40>)
 80033a6:	4c0c      	ldr	r4, [pc, #48]	@ (80033d8 <__libc_init_array+0x44>)
 80033a8:	f000 fc66 	bl	8003c78 <_init>
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	2600      	movs	r6, #0
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	08003d18 	.word	0x08003d18
 80033d0:	08003d18 	.word	0x08003d18
 80033d4:	08003d18 	.word	0x08003d18
 80033d8:	08003d1c 	.word	0x08003d1c

080033dc <__retarget_lock_acquire_recursive>:
 80033dc:	4770      	bx	lr

080033de <__retarget_lock_release_recursive>:
 80033de:	4770      	bx	lr

080033e0 <_free_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4605      	mov	r5, r0
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d041      	beq.n	800346c <_free_r+0x8c>
 80033e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ec:	1f0c      	subs	r4, r1, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bfb8      	it	lt
 80033f2:	18e4      	addlt	r4, r4, r3
 80033f4:	f000 f8e0 	bl	80035b8 <__malloc_lock>
 80033f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <_free_r+0x90>)
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	b933      	cbnz	r3, 800340c <_free_r+0x2c>
 80033fe:	6063      	str	r3, [r4, #4]
 8003400:	6014      	str	r4, [r2, #0]
 8003402:	4628      	mov	r0, r5
 8003404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003408:	f000 b8dc 	b.w	80035c4 <__malloc_unlock>
 800340c:	42a3      	cmp	r3, r4
 800340e:	d908      	bls.n	8003422 <_free_r+0x42>
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	1821      	adds	r1, r4, r0
 8003414:	428b      	cmp	r3, r1
 8003416:	bf01      	itttt	eq
 8003418:	6819      	ldreq	r1, [r3, #0]
 800341a:	685b      	ldreq	r3, [r3, #4]
 800341c:	1809      	addeq	r1, r1, r0
 800341e:	6021      	streq	r1, [r4, #0]
 8003420:	e7ed      	b.n	80033fe <_free_r+0x1e>
 8003422:	461a      	mov	r2, r3
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b10b      	cbz	r3, 800342c <_free_r+0x4c>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d9fa      	bls.n	8003422 <_free_r+0x42>
 800342c:	6811      	ldr	r1, [r2, #0]
 800342e:	1850      	adds	r0, r2, r1
 8003430:	42a0      	cmp	r0, r4
 8003432:	d10b      	bne.n	800344c <_free_r+0x6c>
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	4401      	add	r1, r0
 8003438:	1850      	adds	r0, r2, r1
 800343a:	4283      	cmp	r3, r0
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	d1e0      	bne.n	8003402 <_free_r+0x22>
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	6053      	str	r3, [r2, #4]
 8003446:	4408      	add	r0, r1
 8003448:	6010      	str	r0, [r2, #0]
 800344a:	e7da      	b.n	8003402 <_free_r+0x22>
 800344c:	d902      	bls.n	8003454 <_free_r+0x74>
 800344e:	230c      	movs	r3, #12
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	e7d6      	b.n	8003402 <_free_r+0x22>
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	1821      	adds	r1, r4, r0
 8003458:	428b      	cmp	r3, r1
 800345a:	bf04      	itt	eq
 800345c:	6819      	ldreq	r1, [r3, #0]
 800345e:	685b      	ldreq	r3, [r3, #4]
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	bf04      	itt	eq
 8003464:	1809      	addeq	r1, r1, r0
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	6054      	str	r4, [r2, #4]
 800346a:	e7ca      	b.n	8003402 <_free_r+0x22>
 800346c:	bd38      	pop	{r3, r4, r5, pc}
 800346e:	bf00      	nop
 8003470:	20000b48 	.word	0x20000b48

08003474 <sbrk_aligned>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4e0f      	ldr	r6, [pc, #60]	@ (80034b4 <sbrk_aligned+0x40>)
 8003478:	460c      	mov	r4, r1
 800347a:	6831      	ldr	r1, [r6, #0]
 800347c:	4605      	mov	r5, r0
 800347e:	b911      	cbnz	r1, 8003486 <sbrk_aligned+0x12>
 8003480:	f000 fba6 	bl	8003bd0 <_sbrk_r>
 8003484:	6030      	str	r0, [r6, #0]
 8003486:	4621      	mov	r1, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 fba1 	bl	8003bd0 <_sbrk_r>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	d103      	bne.n	800349a <sbrk_aligned+0x26>
 8003492:	f04f 34ff 	mov.w	r4, #4294967295
 8003496:	4620      	mov	r0, r4
 8003498:	bd70      	pop	{r4, r5, r6, pc}
 800349a:	1cc4      	adds	r4, r0, #3
 800349c:	f024 0403 	bic.w	r4, r4, #3
 80034a0:	42a0      	cmp	r0, r4
 80034a2:	d0f8      	beq.n	8003496 <sbrk_aligned+0x22>
 80034a4:	1a21      	subs	r1, r4, r0
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fb92 	bl	8003bd0 <_sbrk_r>
 80034ac:	3001      	adds	r0, #1
 80034ae:	d1f2      	bne.n	8003496 <sbrk_aligned+0x22>
 80034b0:	e7ef      	b.n	8003492 <sbrk_aligned+0x1e>
 80034b2:	bf00      	nop
 80034b4:	20000b44 	.word	0x20000b44

080034b8 <_malloc_r>:
 80034b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034bc:	1ccd      	adds	r5, r1, #3
 80034be:	f025 0503 	bic.w	r5, r5, #3
 80034c2:	3508      	adds	r5, #8
 80034c4:	2d0c      	cmp	r5, #12
 80034c6:	bf38      	it	cc
 80034c8:	250c      	movcc	r5, #12
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	4606      	mov	r6, r0
 80034ce:	db01      	blt.n	80034d4 <_malloc_r+0x1c>
 80034d0:	42a9      	cmp	r1, r5
 80034d2:	d904      	bls.n	80034de <_malloc_r+0x26>
 80034d4:	230c      	movs	r3, #12
 80034d6:	6033      	str	r3, [r6, #0]
 80034d8:	2000      	movs	r0, #0
 80034da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035b4 <_malloc_r+0xfc>
 80034e2:	f000 f869 	bl	80035b8 <__malloc_lock>
 80034e6:	f8d8 3000 	ldr.w	r3, [r8]
 80034ea:	461c      	mov	r4, r3
 80034ec:	bb44      	cbnz	r4, 8003540 <_malloc_r+0x88>
 80034ee:	4629      	mov	r1, r5
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7ff ffbf 	bl	8003474 <sbrk_aligned>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	4604      	mov	r4, r0
 80034fa:	d158      	bne.n	80035ae <_malloc_r+0xf6>
 80034fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003500:	4627      	mov	r7, r4
 8003502:	2f00      	cmp	r7, #0
 8003504:	d143      	bne.n	800358e <_malloc_r+0xd6>
 8003506:	2c00      	cmp	r4, #0
 8003508:	d04b      	beq.n	80035a2 <_malloc_r+0xea>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	4639      	mov	r1, r7
 800350e:	4630      	mov	r0, r6
 8003510:	eb04 0903 	add.w	r9, r4, r3
 8003514:	f000 fb5c 	bl	8003bd0 <_sbrk_r>
 8003518:	4581      	cmp	r9, r0
 800351a:	d142      	bne.n	80035a2 <_malloc_r+0xea>
 800351c:	6821      	ldr	r1, [r4, #0]
 800351e:	1a6d      	subs	r5, r5, r1
 8003520:	4629      	mov	r1, r5
 8003522:	4630      	mov	r0, r6
 8003524:	f7ff ffa6 	bl	8003474 <sbrk_aligned>
 8003528:	3001      	adds	r0, #1
 800352a:	d03a      	beq.n	80035a2 <_malloc_r+0xea>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	442b      	add	r3, r5
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	f8d8 3000 	ldr.w	r3, [r8]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	bb62      	cbnz	r2, 8003594 <_malloc_r+0xdc>
 800353a:	f8c8 7000 	str.w	r7, [r8]
 800353e:	e00f      	b.n	8003560 <_malloc_r+0xa8>
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	1b52      	subs	r2, r2, r5
 8003544:	d420      	bmi.n	8003588 <_malloc_r+0xd0>
 8003546:	2a0b      	cmp	r2, #11
 8003548:	d917      	bls.n	800357a <_malloc_r+0xc2>
 800354a:	1961      	adds	r1, r4, r5
 800354c:	42a3      	cmp	r3, r4
 800354e:	6025      	str	r5, [r4, #0]
 8003550:	bf18      	it	ne
 8003552:	6059      	strne	r1, [r3, #4]
 8003554:	6863      	ldr	r3, [r4, #4]
 8003556:	bf08      	it	eq
 8003558:	f8c8 1000 	streq.w	r1, [r8]
 800355c:	5162      	str	r2, [r4, r5]
 800355e:	604b      	str	r3, [r1, #4]
 8003560:	4630      	mov	r0, r6
 8003562:	f000 f82f 	bl	80035c4 <__malloc_unlock>
 8003566:	f104 000b 	add.w	r0, r4, #11
 800356a:	1d23      	adds	r3, r4, #4
 800356c:	f020 0007 	bic.w	r0, r0, #7
 8003570:	1ac2      	subs	r2, r0, r3
 8003572:	bf1c      	itt	ne
 8003574:	1a1b      	subne	r3, r3, r0
 8003576:	50a3      	strne	r3, [r4, r2]
 8003578:	e7af      	b.n	80034da <_malloc_r+0x22>
 800357a:	6862      	ldr	r2, [r4, #4]
 800357c:	42a3      	cmp	r3, r4
 800357e:	bf0c      	ite	eq
 8003580:	f8c8 2000 	streq.w	r2, [r8]
 8003584:	605a      	strne	r2, [r3, #4]
 8003586:	e7eb      	b.n	8003560 <_malloc_r+0xa8>
 8003588:	4623      	mov	r3, r4
 800358a:	6864      	ldr	r4, [r4, #4]
 800358c:	e7ae      	b.n	80034ec <_malloc_r+0x34>
 800358e:	463c      	mov	r4, r7
 8003590:	687f      	ldr	r7, [r7, #4]
 8003592:	e7b6      	b.n	8003502 <_malloc_r+0x4a>
 8003594:	461a      	mov	r2, r3
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	42a3      	cmp	r3, r4
 800359a:	d1fb      	bne.n	8003594 <_malloc_r+0xdc>
 800359c:	2300      	movs	r3, #0
 800359e:	6053      	str	r3, [r2, #4]
 80035a0:	e7de      	b.n	8003560 <_malloc_r+0xa8>
 80035a2:	230c      	movs	r3, #12
 80035a4:	6033      	str	r3, [r6, #0]
 80035a6:	4630      	mov	r0, r6
 80035a8:	f000 f80c 	bl	80035c4 <__malloc_unlock>
 80035ac:	e794      	b.n	80034d8 <_malloc_r+0x20>
 80035ae:	6005      	str	r5, [r0, #0]
 80035b0:	e7d6      	b.n	8003560 <_malloc_r+0xa8>
 80035b2:	bf00      	nop
 80035b4:	20000b48 	.word	0x20000b48

080035b8 <__malloc_lock>:
 80035b8:	4801      	ldr	r0, [pc, #4]	@ (80035c0 <__malloc_lock+0x8>)
 80035ba:	f7ff bf0f 	b.w	80033dc <__retarget_lock_acquire_recursive>
 80035be:	bf00      	nop
 80035c0:	20000b40 	.word	0x20000b40

080035c4 <__malloc_unlock>:
 80035c4:	4801      	ldr	r0, [pc, #4]	@ (80035cc <__malloc_unlock+0x8>)
 80035c6:	f7ff bf0a 	b.w	80033de <__retarget_lock_release_recursive>
 80035ca:	bf00      	nop
 80035cc:	20000b40 	.word	0x20000b40

080035d0 <__ssputs_r>:
 80035d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	688e      	ldr	r6, [r1, #8]
 80035d6:	461f      	mov	r7, r3
 80035d8:	42be      	cmp	r6, r7
 80035da:	680b      	ldr	r3, [r1, #0]
 80035dc:	4682      	mov	sl, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	4690      	mov	r8, r2
 80035e2:	d82d      	bhi.n	8003640 <__ssputs_r+0x70>
 80035e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035ec:	d026      	beq.n	800363c <__ssputs_r+0x6c>
 80035ee:	6965      	ldr	r5, [r4, #20]
 80035f0:	6909      	ldr	r1, [r1, #16]
 80035f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035f6:	eba3 0901 	sub.w	r9, r3, r1
 80035fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035fe:	1c7b      	adds	r3, r7, #1
 8003600:	444b      	add	r3, r9
 8003602:	106d      	asrs	r5, r5, #1
 8003604:	429d      	cmp	r5, r3
 8003606:	bf38      	it	cc
 8003608:	461d      	movcc	r5, r3
 800360a:	0553      	lsls	r3, r2, #21
 800360c:	d527      	bpl.n	800365e <__ssputs_r+0x8e>
 800360e:	4629      	mov	r1, r5
 8003610:	f7ff ff52 	bl	80034b8 <_malloc_r>
 8003614:	4606      	mov	r6, r0
 8003616:	b360      	cbz	r0, 8003672 <__ssputs_r+0xa2>
 8003618:	6921      	ldr	r1, [r4, #16]
 800361a:	464a      	mov	r2, r9
 800361c:	f000 fae8 	bl	8003bf0 <memcpy>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	6126      	str	r6, [r4, #16]
 800362e:	6165      	str	r5, [r4, #20]
 8003630:	444e      	add	r6, r9
 8003632:	eba5 0509 	sub.w	r5, r5, r9
 8003636:	6026      	str	r6, [r4, #0]
 8003638:	60a5      	str	r5, [r4, #8]
 800363a:	463e      	mov	r6, r7
 800363c:	42be      	cmp	r6, r7
 800363e:	d900      	bls.n	8003642 <__ssputs_r+0x72>
 8003640:	463e      	mov	r6, r7
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	4632      	mov	r2, r6
 8003646:	4641      	mov	r1, r8
 8003648:	f000 faa8 	bl	8003b9c <memmove>
 800364c:	68a3      	ldr	r3, [r4, #8]
 800364e:	1b9b      	subs	r3, r3, r6
 8003650:	60a3      	str	r3, [r4, #8]
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	4433      	add	r3, r6
 8003656:	6023      	str	r3, [r4, #0]
 8003658:	2000      	movs	r0, #0
 800365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365e:	462a      	mov	r2, r5
 8003660:	f000 fad4 	bl	8003c0c <_realloc_r>
 8003664:	4606      	mov	r6, r0
 8003666:	2800      	cmp	r0, #0
 8003668:	d1e0      	bne.n	800362c <__ssputs_r+0x5c>
 800366a:	6921      	ldr	r1, [r4, #16]
 800366c:	4650      	mov	r0, sl
 800366e:	f7ff feb7 	bl	80033e0 <_free_r>
 8003672:	230c      	movs	r3, #12
 8003674:	f8ca 3000 	str.w	r3, [sl]
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e7e9      	b.n	800365a <__ssputs_r+0x8a>
	...

08003688 <_svfiprintf_r>:
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	4698      	mov	r8, r3
 800368e:	898b      	ldrh	r3, [r1, #12]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	b09d      	sub	sp, #116	@ 0x74
 8003694:	4607      	mov	r7, r0
 8003696:	460d      	mov	r5, r1
 8003698:	4614      	mov	r4, r2
 800369a:	d510      	bpl.n	80036be <_svfiprintf_r+0x36>
 800369c:	690b      	ldr	r3, [r1, #16]
 800369e:	b973      	cbnz	r3, 80036be <_svfiprintf_r+0x36>
 80036a0:	2140      	movs	r1, #64	@ 0x40
 80036a2:	f7ff ff09 	bl	80034b8 <_malloc_r>
 80036a6:	6028      	str	r0, [r5, #0]
 80036a8:	6128      	str	r0, [r5, #16]
 80036aa:	b930      	cbnz	r0, 80036ba <_svfiprintf_r+0x32>
 80036ac:	230c      	movs	r3, #12
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	b01d      	add	sp, #116	@ 0x74
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	2340      	movs	r3, #64	@ 0x40
 80036bc:	616b      	str	r3, [r5, #20]
 80036be:	2300      	movs	r3, #0
 80036c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80036c2:	2320      	movs	r3, #32
 80036c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036cc:	2330      	movs	r3, #48	@ 0x30
 80036ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800386c <_svfiprintf_r+0x1e4>
 80036d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036d6:	f04f 0901 	mov.w	r9, #1
 80036da:	4623      	mov	r3, r4
 80036dc:	469a      	mov	sl, r3
 80036de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036e2:	b10a      	cbz	r2, 80036e8 <_svfiprintf_r+0x60>
 80036e4:	2a25      	cmp	r2, #37	@ 0x25
 80036e6:	d1f9      	bne.n	80036dc <_svfiprintf_r+0x54>
 80036e8:	ebba 0b04 	subs.w	fp, sl, r4
 80036ec:	d00b      	beq.n	8003706 <_svfiprintf_r+0x7e>
 80036ee:	465b      	mov	r3, fp
 80036f0:	4622      	mov	r2, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	4638      	mov	r0, r7
 80036f6:	f7ff ff6b 	bl	80035d0 <__ssputs_r>
 80036fa:	3001      	adds	r0, #1
 80036fc:	f000 80a7 	beq.w	800384e <_svfiprintf_r+0x1c6>
 8003700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003702:	445a      	add	r2, fp
 8003704:	9209      	str	r2, [sp, #36]	@ 0x24
 8003706:	f89a 3000 	ldrb.w	r3, [sl]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 809f 	beq.w	800384e <_svfiprintf_r+0x1c6>
 8003710:	2300      	movs	r3, #0
 8003712:	f04f 32ff 	mov.w	r2, #4294967295
 8003716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800371a:	f10a 0a01 	add.w	sl, sl, #1
 800371e:	9304      	str	r3, [sp, #16]
 8003720:	9307      	str	r3, [sp, #28]
 8003722:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003726:	931a      	str	r3, [sp, #104]	@ 0x68
 8003728:	4654      	mov	r4, sl
 800372a:	2205      	movs	r2, #5
 800372c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003730:	484e      	ldr	r0, [pc, #312]	@ (800386c <_svfiprintf_r+0x1e4>)
 8003732:	f7fc fd75 	bl	8000220 <memchr>
 8003736:	9a04      	ldr	r2, [sp, #16]
 8003738:	b9d8      	cbnz	r0, 8003772 <_svfiprintf_r+0xea>
 800373a:	06d0      	lsls	r0, r2, #27
 800373c:	bf44      	itt	mi
 800373e:	2320      	movmi	r3, #32
 8003740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003744:	0711      	lsls	r1, r2, #28
 8003746:	bf44      	itt	mi
 8003748:	232b      	movmi	r3, #43	@ 0x2b
 800374a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800374e:	f89a 3000 	ldrb.w	r3, [sl]
 8003752:	2b2a      	cmp	r3, #42	@ 0x2a
 8003754:	d015      	beq.n	8003782 <_svfiprintf_r+0xfa>
 8003756:	9a07      	ldr	r2, [sp, #28]
 8003758:	4654      	mov	r4, sl
 800375a:	2000      	movs	r0, #0
 800375c:	f04f 0c0a 	mov.w	ip, #10
 8003760:	4621      	mov	r1, r4
 8003762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003766:	3b30      	subs	r3, #48	@ 0x30
 8003768:	2b09      	cmp	r3, #9
 800376a:	d94b      	bls.n	8003804 <_svfiprintf_r+0x17c>
 800376c:	b1b0      	cbz	r0, 800379c <_svfiprintf_r+0x114>
 800376e:	9207      	str	r2, [sp, #28]
 8003770:	e014      	b.n	800379c <_svfiprintf_r+0x114>
 8003772:	eba0 0308 	sub.w	r3, r0, r8
 8003776:	fa09 f303 	lsl.w	r3, r9, r3
 800377a:	4313      	orrs	r3, r2
 800377c:	9304      	str	r3, [sp, #16]
 800377e:	46a2      	mov	sl, r4
 8003780:	e7d2      	b.n	8003728 <_svfiprintf_r+0xa0>
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	1d19      	adds	r1, r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	9103      	str	r1, [sp, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfbb      	ittet	lt
 800378e:	425b      	neglt	r3, r3
 8003790:	f042 0202 	orrlt.w	r2, r2, #2
 8003794:	9307      	strge	r3, [sp, #28]
 8003796:	9307      	strlt	r3, [sp, #28]
 8003798:	bfb8      	it	lt
 800379a:	9204      	strlt	r2, [sp, #16]
 800379c:	7823      	ldrb	r3, [r4, #0]
 800379e:	2b2e      	cmp	r3, #46	@ 0x2e
 80037a0:	d10a      	bne.n	80037b8 <_svfiprintf_r+0x130>
 80037a2:	7863      	ldrb	r3, [r4, #1]
 80037a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80037a6:	d132      	bne.n	800380e <_svfiprintf_r+0x186>
 80037a8:	9b03      	ldr	r3, [sp, #12]
 80037aa:	1d1a      	adds	r2, r3, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	9203      	str	r2, [sp, #12]
 80037b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037b4:	3402      	adds	r4, #2
 80037b6:	9305      	str	r3, [sp, #20]
 80037b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800387c <_svfiprintf_r+0x1f4>
 80037bc:	7821      	ldrb	r1, [r4, #0]
 80037be:	2203      	movs	r2, #3
 80037c0:	4650      	mov	r0, sl
 80037c2:	f7fc fd2d 	bl	8000220 <memchr>
 80037c6:	b138      	cbz	r0, 80037d8 <_svfiprintf_r+0x150>
 80037c8:	9b04      	ldr	r3, [sp, #16]
 80037ca:	eba0 000a 	sub.w	r0, r0, sl
 80037ce:	2240      	movs	r2, #64	@ 0x40
 80037d0:	4082      	lsls	r2, r0
 80037d2:	4313      	orrs	r3, r2
 80037d4:	3401      	adds	r4, #1
 80037d6:	9304      	str	r3, [sp, #16]
 80037d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037dc:	4824      	ldr	r0, [pc, #144]	@ (8003870 <_svfiprintf_r+0x1e8>)
 80037de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037e2:	2206      	movs	r2, #6
 80037e4:	f7fc fd1c 	bl	8000220 <memchr>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d036      	beq.n	800385a <_svfiprintf_r+0x1d2>
 80037ec:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <_svfiprintf_r+0x1ec>)
 80037ee:	bb1b      	cbnz	r3, 8003838 <_svfiprintf_r+0x1b0>
 80037f0:	9b03      	ldr	r3, [sp, #12]
 80037f2:	3307      	adds	r3, #7
 80037f4:	f023 0307 	bic.w	r3, r3, #7
 80037f8:	3308      	adds	r3, #8
 80037fa:	9303      	str	r3, [sp, #12]
 80037fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037fe:	4433      	add	r3, r6
 8003800:	9309      	str	r3, [sp, #36]	@ 0x24
 8003802:	e76a      	b.n	80036da <_svfiprintf_r+0x52>
 8003804:	fb0c 3202 	mla	r2, ip, r2, r3
 8003808:	460c      	mov	r4, r1
 800380a:	2001      	movs	r0, #1
 800380c:	e7a8      	b.n	8003760 <_svfiprintf_r+0xd8>
 800380e:	2300      	movs	r3, #0
 8003810:	3401      	adds	r4, #1
 8003812:	9305      	str	r3, [sp, #20]
 8003814:	4619      	mov	r1, r3
 8003816:	f04f 0c0a 	mov.w	ip, #10
 800381a:	4620      	mov	r0, r4
 800381c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003820:	3a30      	subs	r2, #48	@ 0x30
 8003822:	2a09      	cmp	r2, #9
 8003824:	d903      	bls.n	800382e <_svfiprintf_r+0x1a6>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0c6      	beq.n	80037b8 <_svfiprintf_r+0x130>
 800382a:	9105      	str	r1, [sp, #20]
 800382c:	e7c4      	b.n	80037b8 <_svfiprintf_r+0x130>
 800382e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003832:	4604      	mov	r4, r0
 8003834:	2301      	movs	r3, #1
 8003836:	e7f0      	b.n	800381a <_svfiprintf_r+0x192>
 8003838:	ab03      	add	r3, sp, #12
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	462a      	mov	r2, r5
 800383e:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <_svfiprintf_r+0x1f0>)
 8003840:	a904      	add	r1, sp, #16
 8003842:	4638      	mov	r0, r7
 8003844:	f3af 8000 	nop.w
 8003848:	1c42      	adds	r2, r0, #1
 800384a:	4606      	mov	r6, r0
 800384c:	d1d6      	bne.n	80037fc <_svfiprintf_r+0x174>
 800384e:	89ab      	ldrh	r3, [r5, #12]
 8003850:	065b      	lsls	r3, r3, #25
 8003852:	f53f af2d 	bmi.w	80036b0 <_svfiprintf_r+0x28>
 8003856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003858:	e72c      	b.n	80036b4 <_svfiprintf_r+0x2c>
 800385a:	ab03      	add	r3, sp, #12
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	462a      	mov	r2, r5
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <_svfiprintf_r+0x1f0>)
 8003862:	a904      	add	r1, sp, #16
 8003864:	4638      	mov	r0, r7
 8003866:	f000 f879 	bl	800395c <_printf_i>
 800386a:	e7ed      	b.n	8003848 <_svfiprintf_r+0x1c0>
 800386c:	08003cdc 	.word	0x08003cdc
 8003870:	08003ce6 	.word	0x08003ce6
 8003874:	00000000 	.word	0x00000000
 8003878:	080035d1 	.word	0x080035d1
 800387c:	08003ce2 	.word	0x08003ce2

08003880 <_printf_common>:
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	4616      	mov	r6, r2
 8003886:	4698      	mov	r8, r3
 8003888:	688a      	ldr	r2, [r1, #8]
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003890:	4293      	cmp	r3, r2
 8003892:	bfb8      	it	lt
 8003894:	4613      	movlt	r3, r2
 8003896:	6033      	str	r3, [r6, #0]
 8003898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800389c:	4607      	mov	r7, r0
 800389e:	460c      	mov	r4, r1
 80038a0:	b10a      	cbz	r2, 80038a6 <_printf_common+0x26>
 80038a2:	3301      	adds	r3, #1
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	0699      	lsls	r1, r3, #26
 80038aa:	bf42      	ittt	mi
 80038ac:	6833      	ldrmi	r3, [r6, #0]
 80038ae:	3302      	addmi	r3, #2
 80038b0:	6033      	strmi	r3, [r6, #0]
 80038b2:	6825      	ldr	r5, [r4, #0]
 80038b4:	f015 0506 	ands.w	r5, r5, #6
 80038b8:	d106      	bne.n	80038c8 <_printf_common+0x48>
 80038ba:	f104 0a19 	add.w	sl, r4, #25
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	6832      	ldr	r2, [r6, #0]
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	42ab      	cmp	r3, r5
 80038c6:	dc26      	bgt.n	8003916 <_printf_common+0x96>
 80038c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	3b00      	subs	r3, #0
 80038d0:	bf18      	it	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	0692      	lsls	r2, r2, #26
 80038d6:	d42b      	bmi.n	8003930 <_printf_common+0xb0>
 80038d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038dc:	4641      	mov	r1, r8
 80038de:	4638      	mov	r0, r7
 80038e0:	47c8      	blx	r9
 80038e2:	3001      	adds	r0, #1
 80038e4:	d01e      	beq.n	8003924 <_printf_common+0xa4>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	6922      	ldr	r2, [r4, #16]
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf02      	ittt	eq
 80038f2:	68e5      	ldreq	r5, [r4, #12]
 80038f4:	6833      	ldreq	r3, [r6, #0]
 80038f6:	1aed      	subeq	r5, r5, r3
 80038f8:	68a3      	ldr	r3, [r4, #8]
 80038fa:	bf0c      	ite	eq
 80038fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003900:	2500      	movne	r5, #0
 8003902:	4293      	cmp	r3, r2
 8003904:	bfc4      	itt	gt
 8003906:	1a9b      	subgt	r3, r3, r2
 8003908:	18ed      	addgt	r5, r5, r3
 800390a:	2600      	movs	r6, #0
 800390c:	341a      	adds	r4, #26
 800390e:	42b5      	cmp	r5, r6
 8003910:	d11a      	bne.n	8003948 <_printf_common+0xc8>
 8003912:	2000      	movs	r0, #0
 8003914:	e008      	b.n	8003928 <_printf_common+0xa8>
 8003916:	2301      	movs	r3, #1
 8003918:	4652      	mov	r2, sl
 800391a:	4641      	mov	r1, r8
 800391c:	4638      	mov	r0, r7
 800391e:	47c8      	blx	r9
 8003920:	3001      	adds	r0, #1
 8003922:	d103      	bne.n	800392c <_printf_common+0xac>
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392c:	3501      	adds	r5, #1
 800392e:	e7c6      	b.n	80038be <_printf_common+0x3e>
 8003930:	18e1      	adds	r1, r4, r3
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	2030      	movs	r0, #48	@ 0x30
 8003936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800393a:	4422      	add	r2, r4
 800393c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003944:	3302      	adds	r3, #2
 8003946:	e7c7      	b.n	80038d8 <_printf_common+0x58>
 8003948:	2301      	movs	r3, #1
 800394a:	4622      	mov	r2, r4
 800394c:	4641      	mov	r1, r8
 800394e:	4638      	mov	r0, r7
 8003950:	47c8      	blx	r9
 8003952:	3001      	adds	r0, #1
 8003954:	d0e6      	beq.n	8003924 <_printf_common+0xa4>
 8003956:	3601      	adds	r6, #1
 8003958:	e7d9      	b.n	800390e <_printf_common+0x8e>
	...

0800395c <_printf_i>:
 800395c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	7e0f      	ldrb	r7, [r1, #24]
 8003962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003964:	2f78      	cmp	r7, #120	@ 0x78
 8003966:	4691      	mov	r9, r2
 8003968:	4680      	mov	r8, r0
 800396a:	460c      	mov	r4, r1
 800396c:	469a      	mov	sl, r3
 800396e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003972:	d807      	bhi.n	8003984 <_printf_i+0x28>
 8003974:	2f62      	cmp	r7, #98	@ 0x62
 8003976:	d80a      	bhi.n	800398e <_printf_i+0x32>
 8003978:	2f00      	cmp	r7, #0
 800397a:	f000 80d2 	beq.w	8003b22 <_printf_i+0x1c6>
 800397e:	2f58      	cmp	r7, #88	@ 0x58
 8003980:	f000 80b9 	beq.w	8003af6 <_printf_i+0x19a>
 8003984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800398c:	e03a      	b.n	8003a04 <_printf_i+0xa8>
 800398e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003992:	2b15      	cmp	r3, #21
 8003994:	d8f6      	bhi.n	8003984 <_printf_i+0x28>
 8003996:	a101      	add	r1, pc, #4	@ (adr r1, 800399c <_printf_i+0x40>)
 8003998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800399c:	080039f5 	.word	0x080039f5
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	08003985 	.word	0x08003985
 80039a8:	08003985 	.word	0x08003985
 80039ac:	08003985 	.word	0x08003985
 80039b0:	08003985 	.word	0x08003985
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003985 	.word	0x08003985
 80039bc:	08003985 	.word	0x08003985
 80039c0:	08003985 	.word	0x08003985
 80039c4:	08003985 	.word	0x08003985
 80039c8:	08003b09 	.word	0x08003b09
 80039cc:	08003a33 	.word	0x08003a33
 80039d0:	08003ac3 	.word	0x08003ac3
 80039d4:	08003985 	.word	0x08003985
 80039d8:	08003985 	.word	0x08003985
 80039dc:	08003b2b 	.word	0x08003b2b
 80039e0:	08003985 	.word	0x08003985
 80039e4:	08003a33 	.word	0x08003a33
 80039e8:	08003985 	.word	0x08003985
 80039ec:	08003985 	.word	0x08003985
 80039f0:	08003acb 	.word	0x08003acb
 80039f4:	6833      	ldr	r3, [r6, #0]
 80039f6:	1d1a      	adds	r2, r3, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6032      	str	r2, [r6, #0]
 80039fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a04:	2301      	movs	r3, #1
 8003a06:	e09d      	b.n	8003b44 <_printf_i+0x1e8>
 8003a08:	6833      	ldr	r3, [r6, #0]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1d19      	adds	r1, r3, #4
 8003a0e:	6031      	str	r1, [r6, #0]
 8003a10:	0606      	lsls	r6, r0, #24
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0xbc>
 8003a14:	681d      	ldr	r5, [r3, #0]
 8003a16:	e003      	b.n	8003a20 <_printf_i+0xc4>
 8003a18:	0645      	lsls	r5, r0, #25
 8003a1a:	d5fb      	bpl.n	8003a14 <_printf_i+0xb8>
 8003a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	da03      	bge.n	8003a2c <_printf_i+0xd0>
 8003a24:	232d      	movs	r3, #45	@ 0x2d
 8003a26:	426d      	negs	r5, r5
 8003a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a2c:	4859      	ldr	r0, [pc, #356]	@ (8003b94 <_printf_i+0x238>)
 8003a2e:	230a      	movs	r3, #10
 8003a30:	e011      	b.n	8003a56 <_printf_i+0xfa>
 8003a32:	6821      	ldr	r1, [r4, #0]
 8003a34:	6833      	ldr	r3, [r6, #0]
 8003a36:	0608      	lsls	r0, r1, #24
 8003a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a3c:	d402      	bmi.n	8003a44 <_printf_i+0xe8>
 8003a3e:	0649      	lsls	r1, r1, #25
 8003a40:	bf48      	it	mi
 8003a42:	b2ad      	uxthmi	r5, r5
 8003a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a46:	4853      	ldr	r0, [pc, #332]	@ (8003b94 <_printf_i+0x238>)
 8003a48:	6033      	str	r3, [r6, #0]
 8003a4a:	bf14      	ite	ne
 8003a4c:	230a      	movne	r3, #10
 8003a4e:	2308      	moveq	r3, #8
 8003a50:	2100      	movs	r1, #0
 8003a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a56:	6866      	ldr	r6, [r4, #4]
 8003a58:	60a6      	str	r6, [r4, #8]
 8003a5a:	2e00      	cmp	r6, #0
 8003a5c:	bfa2      	ittt	ge
 8003a5e:	6821      	ldrge	r1, [r4, #0]
 8003a60:	f021 0104 	bicge.w	r1, r1, #4
 8003a64:	6021      	strge	r1, [r4, #0]
 8003a66:	b90d      	cbnz	r5, 8003a6c <_printf_i+0x110>
 8003a68:	2e00      	cmp	r6, #0
 8003a6a:	d04b      	beq.n	8003b04 <_printf_i+0x1a8>
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a72:	fb03 5711 	mls	r7, r3, r1, r5
 8003a76:	5dc7      	ldrb	r7, [r0, r7]
 8003a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a7c:	462f      	mov	r7, r5
 8003a7e:	42bb      	cmp	r3, r7
 8003a80:	460d      	mov	r5, r1
 8003a82:	d9f4      	bls.n	8003a6e <_printf_i+0x112>
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10b      	bne.n	8003aa0 <_printf_i+0x144>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	07df      	lsls	r7, r3, #31
 8003a8c:	d508      	bpl.n	8003aa0 <_printf_i+0x144>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	6861      	ldr	r1, [r4, #4]
 8003a92:	4299      	cmp	r1, r3
 8003a94:	bfde      	ittt	le
 8003a96:	2330      	movle	r3, #48	@ 0x30
 8003a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003aa0:	1b92      	subs	r2, r2, r6
 8003aa2:	6122      	str	r2, [r4, #16]
 8003aa4:	f8cd a000 	str.w	sl, [sp]
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	aa03      	add	r2, sp, #12
 8003aac:	4621      	mov	r1, r4
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fee6 	bl	8003880 <_printf_common>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d14a      	bne.n	8003b4e <_printf_i+0x1f2>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	b004      	add	sp, #16
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	4833      	ldr	r0, [pc, #204]	@ (8003b98 <_printf_i+0x23c>)
 8003acc:	2778      	movs	r7, #120	@ 0x78
 8003ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6831      	ldr	r1, [r6, #0]
 8003ad6:	061f      	lsls	r7, r3, #24
 8003ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003adc:	d402      	bmi.n	8003ae4 <_printf_i+0x188>
 8003ade:	065f      	lsls	r7, r3, #25
 8003ae0:	bf48      	it	mi
 8003ae2:	b2ad      	uxthmi	r5, r5
 8003ae4:	6031      	str	r1, [r6, #0]
 8003ae6:	07d9      	lsls	r1, r3, #31
 8003ae8:	bf44      	itt	mi
 8003aea:	f043 0320 	orrmi.w	r3, r3, #32
 8003aee:	6023      	strmi	r3, [r4, #0]
 8003af0:	b11d      	cbz	r5, 8003afa <_printf_i+0x19e>
 8003af2:	2310      	movs	r3, #16
 8003af4:	e7ac      	b.n	8003a50 <_printf_i+0xf4>
 8003af6:	4827      	ldr	r0, [pc, #156]	@ (8003b94 <_printf_i+0x238>)
 8003af8:	e7e9      	b.n	8003ace <_printf_i+0x172>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	f023 0320 	bic.w	r3, r3, #32
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	e7f6      	b.n	8003af2 <_printf_i+0x196>
 8003b04:	4616      	mov	r6, r2
 8003b06:	e7bd      	b.n	8003a84 <_printf_i+0x128>
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	6825      	ldr	r5, [r4, #0]
 8003b0c:	6961      	ldr	r1, [r4, #20]
 8003b0e:	1d18      	adds	r0, r3, #4
 8003b10:	6030      	str	r0, [r6, #0]
 8003b12:	062e      	lsls	r6, r5, #24
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0x1c0>
 8003b18:	6019      	str	r1, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0x1c6>
 8003b1c:	0668      	lsls	r0, r5, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0x1bc>
 8003b20:	8019      	strh	r1, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	4616      	mov	r6, r2
 8003b28:	e7bc      	b.n	8003aa4 <_printf_i+0x148>
 8003b2a:	6833      	ldr	r3, [r6, #0]
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	6032      	str	r2, [r6, #0]
 8003b30:	681e      	ldr	r6, [r3, #0]
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	2100      	movs	r1, #0
 8003b36:	4630      	mov	r0, r6
 8003b38:	f7fc fb72 	bl	8000220 <memchr>
 8003b3c:	b108      	cbz	r0, 8003b42 <_printf_i+0x1e6>
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	6060      	str	r0, [r4, #4]
 8003b42:	6863      	ldr	r3, [r4, #4]
 8003b44:	6123      	str	r3, [r4, #16]
 8003b46:	2300      	movs	r3, #0
 8003b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b4c:	e7aa      	b.n	8003aa4 <_printf_i+0x148>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	4632      	mov	r2, r6
 8003b52:	4649      	mov	r1, r9
 8003b54:	4640      	mov	r0, r8
 8003b56:	47d0      	blx	sl
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d0ad      	beq.n	8003ab8 <_printf_i+0x15c>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	079b      	lsls	r3, r3, #30
 8003b60:	d413      	bmi.n	8003b8a <_printf_i+0x22e>
 8003b62:	68e0      	ldr	r0, [r4, #12]
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	4298      	cmp	r0, r3
 8003b68:	bfb8      	it	lt
 8003b6a:	4618      	movlt	r0, r3
 8003b6c:	e7a6      	b.n	8003abc <_printf_i+0x160>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4632      	mov	r2, r6
 8003b72:	4649      	mov	r1, r9
 8003b74:	4640      	mov	r0, r8
 8003b76:	47d0      	blx	sl
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d09d      	beq.n	8003ab8 <_printf_i+0x15c>
 8003b7c:	3501      	adds	r5, #1
 8003b7e:	68e3      	ldr	r3, [r4, #12]
 8003b80:	9903      	ldr	r1, [sp, #12]
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	42ab      	cmp	r3, r5
 8003b86:	dcf2      	bgt.n	8003b6e <_printf_i+0x212>
 8003b88:	e7eb      	b.n	8003b62 <_printf_i+0x206>
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	f104 0619 	add.w	r6, r4, #25
 8003b90:	e7f5      	b.n	8003b7e <_printf_i+0x222>
 8003b92:	bf00      	nop
 8003b94:	08003ced 	.word	0x08003ced
 8003b98:	08003cfe 	.word	0x08003cfe

08003b9c <memmove>:
 8003b9c:	4288      	cmp	r0, r1
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	eb01 0402 	add.w	r4, r1, r2
 8003ba4:	d902      	bls.n	8003bac <memmove+0x10>
 8003ba6:	4284      	cmp	r4, r0
 8003ba8:	4623      	mov	r3, r4
 8003baa:	d807      	bhi.n	8003bbc <memmove+0x20>
 8003bac:	1e43      	subs	r3, r0, #1
 8003bae:	42a1      	cmp	r1, r4
 8003bb0:	d008      	beq.n	8003bc4 <memmove+0x28>
 8003bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bba:	e7f8      	b.n	8003bae <memmove+0x12>
 8003bbc:	4402      	add	r2, r0
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	d100      	bne.n	8003bc6 <memmove+0x2a>
 8003bc4:	bd10      	pop	{r4, pc}
 8003bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bce:	e7f7      	b.n	8003bc0 <memmove+0x24>

08003bd0 <_sbrk_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d06      	ldr	r5, [pc, #24]	@ (8003bec <_sbrk_r+0x1c>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fc ff9e 	bl	8000b1c <_sbrk>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_sbrk_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_sbrk_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	20000b3c 	.word	0x20000b3c

08003bf0 <memcpy>:
 8003bf0:	440a      	add	r2, r1
 8003bf2:	4291      	cmp	r1, r2
 8003bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bf8:	d100      	bne.n	8003bfc <memcpy+0xc>
 8003bfa:	4770      	bx	lr
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c06:	4291      	cmp	r1, r2
 8003c08:	d1f9      	bne.n	8003bfe <memcpy+0xe>
 8003c0a:	bd10      	pop	{r4, pc}

08003c0c <_realloc_r>:
 8003c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	4680      	mov	r8, r0
 8003c12:	4615      	mov	r5, r2
 8003c14:	460c      	mov	r4, r1
 8003c16:	b921      	cbnz	r1, 8003c22 <_realloc_r+0x16>
 8003c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f7ff bc4b 	b.w	80034b8 <_malloc_r>
 8003c22:	b92a      	cbnz	r2, 8003c30 <_realloc_r+0x24>
 8003c24:	f7ff fbdc 	bl	80033e0 <_free_r>
 8003c28:	2400      	movs	r4, #0
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	f000 f81a 	bl	8003c68 <_malloc_usable_size_r>
 8003c34:	4285      	cmp	r5, r0
 8003c36:	4606      	mov	r6, r0
 8003c38:	d802      	bhi.n	8003c40 <_realloc_r+0x34>
 8003c3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c3e:	d8f4      	bhi.n	8003c2a <_realloc_r+0x1e>
 8003c40:	4629      	mov	r1, r5
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7ff fc38 	bl	80034b8 <_malloc_r>
 8003c48:	4607      	mov	r7, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d0ec      	beq.n	8003c28 <_realloc_r+0x1c>
 8003c4e:	42b5      	cmp	r5, r6
 8003c50:	462a      	mov	r2, r5
 8003c52:	4621      	mov	r1, r4
 8003c54:	bf28      	it	cs
 8003c56:	4632      	movcs	r2, r6
 8003c58:	f7ff ffca 	bl	8003bf0 <memcpy>
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	4640      	mov	r0, r8
 8003c60:	f7ff fbbe 	bl	80033e0 <_free_r>
 8003c64:	463c      	mov	r4, r7
 8003c66:	e7e0      	b.n	8003c2a <_realloc_r+0x1e>

08003c68 <_malloc_usable_size_r>:
 8003c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6c:	1f18      	subs	r0, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfbc      	itt	lt
 8003c72:	580b      	ldrlt	r3, [r1, r0]
 8003c74:	18c0      	addlt	r0, r0, r3
 8003c76:	4770      	bx	lr

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
